---
# This file is the entrypoint to deploy packit-service to an openshift cluster (e.g. in Zuul)
- name: Deploy dev version of packit-service into zuul.
  hosts: all
  vars:
    deployment_dir: "{{ ansible_user_dir }}/{{ zuul.projects['github.com/packit/deployment'].src_dir }}"
    as_root: true # needs to run as root in zuul
  tasks:
    - name: Install packages for deployment
      dnf:
        name:
          - git
          - ansible
          - python3-openshift
          - make
          - skopeo
      become: true

    - name: clone deployment repo when not running in zuul
      block:
        - set_fact: deployment_dir=/tmp/deployment
        - set_fact: as_root=false
        - name: clone deployment repository (templates are there)
          git:
            repo: "https://github.com/packit/deployment.git"
            dest: "{{ deployment_dir }}"
            clone: yes
      when: zuul is not defined

    - name: Generate secrets
      command: make generate-local-secrets
      environment:
        DEPLOYMENT: dev
        ANSIBLE_STDOUT_CALLBACK: debug
      args:
        chdir: "{{ deployment_dir }}"
      become: "{{ as_root }}"
      when: path_to_secrets is not defined

    - name: symlink provided path_to_secrets to secrets/dev/
      file:
        state: link
        src: "{{ path_to_secrets }}/dev"
        dest: "{{ deployment_dir }}/secrets/dev"
      when: path_to_secrets is defined

    - name: get token
      command: oc whoami -t
      register: kubeconfig_token
      become: "{{ as_root }}"

    - name: Create dev.yml
      copy:
        content: |
          # See https://github.com/packit/deployment/blob/master/vars/dev_template.yml
          project: myproject
          host: https://127.0.0.1:8443
          api_key: {{ kubeconfig_token.stdout }}
          validate_certs: no
          # we don't need these services for testing p-s
          with_tokman: true
          with_beat: false
          with_fedmsg: false
          with_centosmsg: false
          with_dashboard: false
          with_pushgateway: false
          push_dev_images: true
          # we don't have tokman:dev
          image_tokman: docker.io/usercont/tokman:stg
        dest: "{{ deployment_dir }}/vars/dev.yml"

    - name: Actually deploy
      command: make deploy
      environment:
        DEPLOYMENT: dev
        ANSIBLE_STDOUT_CALLBACK: debug
      args:
        chdir: "{{ deployment_dir }}"
      become: "{{ as_root }}"
